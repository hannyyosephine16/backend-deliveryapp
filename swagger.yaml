openapi: 3.0.3
info:
  title: Del-Pick API
  description: API for Del-Pick, a food delivery service application enabling customers to order food, drivers to deliver orders, and store owners to manage their menus and orders.
  version: 1.0.0
  contact:
    name: API Support
    email: support@delpick.id
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://delpick.horas-code.my.id/api/v1
    description: Production Server
  - url: http://localhost:6100/api/v1
    description: Development Server

tags:
  - name: Authentication
    description: Endpoints for user authentication and profile management
  - name: Customers
    description: Endpoints for managing customer accounts and profiles
  - name: Stores
    description: Endpoints for managing stores and their details
  - name: Menu
    description: Endpoints for managing menu items in stores
  - name: Orders
    description: Endpoints for creating, managing, and reviewing orders
  - name: Drivers
    description: Endpoints for managing drivers and their activities
  - name: Driver Requests
    description: Endpoints for managing driver delivery requests
  - name: Tracking
    description: Endpoints for tracking order delivery status

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login endpoint

  schemas:
    ErrorResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 400
        message:
          type: string
          example: Error message
        error:
          type: string
          example: Detailed error information (only in development)

    SuccessResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 200
        message:
          type: string
          example: Success message
        data:
          type: object
          description: Response data (varies by endpoint)

    RegisterRequest:
      type: object
      required:
        - name
        - email
        - password
        - phone
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: john@example.com
        password:
          type: string
          format: password
          example: password123
        phone:
          type: string
          example: "08123456789"
        role:
          type: string
          enum: [customer, driver, owner]
          default: customer
          example: customer

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: john@example.com
        password:
          type: string
          format: password
          example: password123

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Creates a new user account with the default role of 'customer'
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Email already registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Log in a user
      description: Authenticates a user and returns a JWT token
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/profile:
    get:
      tags:
        - Authentication
      summary: Get user profile
      description: Retrieves the profile of the authenticated user
      operationId: getProfile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /customers:
    get:
      tags:
        - Customers
      summary: Get all customers
      description: Retrieves a list of all customers (admin only)
      operationId: getAllCustomers
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of customers retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /stores:
    get:
      tags:
        - Stores
      summary: Get all stores
      description: Retrieves a list of all stores
      operationId: getAllStores
      responses:
        '200':
          description: List of stores retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /menu:
    get:
      tags:
        - Menu
      summary: Get menu items
      description: Retrieves menu items, optionally filtered by store
      operationId: getMenuItems
      parameters:
        - name: storeId
          in: query
          description: Filter menu items by store ID
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Menu items retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /orders:
    post:
      tags:
        - Orders
      summary: Create a new order
      description: Creates a new order for the authenticated customer
      operationId: createOrder
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - storeId
                - items
              properties:
                storeId:
                  type: integer
                  example: 1
                items:
                  type: array
                  items:
                    type: object
                    required:
                      - menuItemId
                      - quantity
                    properties:
                      menuItemId:
                        type: integer
                        example: 1
                      quantity:
                        type: integer
                        minimum: 1
                        example: 2
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /drivers:
    get:
      tags:
        - Drivers
      summary: Get all drivers
      description: Retrieves a list of all drivers
      operationId: getAllDrivers
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of drivers retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /driver-requests:
    post:
      tags:
        - Driver Requests
      summary: Create a driver request
      description: Creates a new driver request for an order
      operationId: createDriverRequest
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - orderId
              properties:
                orderId:
                  type: integer
                  example: 1
      responses:
        '201':
          description: Driver request created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /tracking/{orderId}:
    get:
      tags:
        - Tracking
      summary: Track an order
      description: Retrieves the current status and location of an order
      operationId: trackOrder
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
          description: ID of the order to track
      responses:
        '200':
          description: Order tracking information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'